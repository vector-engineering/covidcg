import datetime
import os

from pathlib import Path

# Import scripts
from scripts.clean_metadata import clean_metadata
from scripts.copy_changed_files import copy_changed_files
from scripts.rewrite_data_feed import rewrite_data_feed

envvars:
    "GISAID_URL",
    "GISAID_USERNAME",
    "GISAID_PASSWORD"


if "data_folder" not in config:
    config["data_folder"] = "../data"

if "static_data_folder" not in config:
    config["static_data_folder"] = "../static_data"

# Get today's date in ISO format (YYYY-MM-DD)
today_str = datetime.date.today().isoformat()

rule all:
    input:
        # Download latest data feed, process sequences
        os.path.join(data_folder, "status", "download_" + today_str + ".done"),
        os.path.join(data_folder, "status", "merge_sequences_" + today_str + ".done")


rule download_data_feed:
    """Download the data feed JSON object from the GISAID database, using our data feed credentials. The resulting file will need to be decompressed by `decompress_data_feed`
    """
    output:
        feed = temp(os.path.join(config["data_folder"], "feed.json")),
        status = touch(os.path.join(
            config["data_folder"], "status", "download_" + today_str + ".done"
        ))
    params:
        cred_str = os.getenv("GISAID_USERNAME") + ":" + os.getenv("GISAID_PASSWORD"),
        feed_url = os.getenv("GISAID_URL")
    threads: workflow.cores
    shell:
        "curl -L https://{params.cred_str}@{params.feed_url} | unxz --threads={threads} -c - > {output.feed}"


checkpoint rewrite_data_feed:
    """Split up the data feed's individual JSON objects into metadata and fasta files. Chunk the fasta files so that every day we only reprocess the subset of fasta files that have changed. The smaller the chunk size, the more efficient the updates, but the more files on the filesystem.
    On a 48-core workstation with 128 GB RAM, aligning 200 sequences takes about 10 minutes, and this is more acceptable than having to align 1000 sequences, which takes ~1 hour. We end up with hundreds of files, but the filesystem seems to be handling it well.
    """
    input:
        data_feed = rules.download_data_feed.output.feed
    output:
        fasta = directory(os.path.join(config["data_folder"], "fasta_temp")),
        metadata_dirty = temp(os.path.join(config["data_folder"], "metadata_dirty.csv"))
    params:
        chunk_size = 100000
    run:
        rewrite_data_feed(
            input.data_feed, output.fasta, output.metadata_dirty, 
            chunk_size=params.chunk_size, 
            processes=workflow.cores
        )


rule clean_metadata:
    """Clean up metadata from GISAID
    """
    input:
        metadata_dirty = rules.rewrite_data_feed.output.metadata_dirty,
        location_corrections = os.path.join(
            config["static_data_folder"], "location_corrections.csv"
        ),
    output:
        metadata_clean = os.path.join(config["data_folder"], "metadata.csv")
    run:
        clean_metadata(input.metadata_dirty, input.location_corrections, output.metadata_clean)


def get_changed_chunks(wildcards):
    """Helper function for detecting which chunks have changed in terms of their contents 
    (measured in equality by bytes of disk space occupied). Only re-process and re-align chunks which have changed. This will save us a ton of computational time, as now that there are 200K+
    isolates on GISAID, aligning them would take 1 week for the whole batch.
    """
    
    # Get all chunks from the fasta_temp directory
    checkpoint_output = checkpoints.rewrite_data_feed.get(**wildcards).output[0]
    chunks, = glob_wildcards(os.path.join(checkpoint_output, "{i}.fa.gz"))

    # Keep track of which chunks have changed
    changed_chunks = []

    for chunk in chunks:
        fasta_temp_path = Path(config["data_folder"]) / "fasta_temp" / (chunk + ".fa.gz")
        fasta_raw_path = Path(config["data_folder"]) / "fasta_raw" / (chunk + ".fa.gz")

        # The chunk has changed if:
        # 1) The current chunk does not exist yet
        # 2) The new chunk and the current chunk are different sizes (in bytes)
        if (
                not fasta_raw_path.exists() or 
                not fasta_raw_path.is_file() or 
                fasta_temp_path.stat().st_size != fasta_raw_path.stat().st_size
            ):
            
            changed_chunks.append(chunk)

    # Return a list of fasta_temp files that have changed, so that they can be copied
    # over to fasta_raw by the below `copy_changed_files` rule
    return expand(os.path.join(config["data_folder"], "fasta_temp", "{i}.fa.gz"), i=changed_chunks)


checkpoint copy_changed_files:
    """Using the `get_changed_chunks` function, only copy fasta files which have changed
    from the purgatory `fasta_temp` folder to the `fasta_raw` folder. By copying over the files,
    it will flag to snakemake that they (and only they - not the others) will need to be
    reprocessed and realigned.
    """
    input:
        get_changed_chunks
    output:
        # Instead of explicitly defining the fasta_raw outputs
        # (and risking touching fasta files that haven't actually changed)
        # Have the output be a flag instead, that the "all" rule checks for
        # to make sure that we actually run this rule
        touch(os.path.join(
            config["data_folder"], "status", "merge_sequences_" + today_str + ".done"
        ))
    run:
        copy_changed_files(input, config["data_folder"])
