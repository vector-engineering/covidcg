# coding: utf-8

"""Main data processing workflow from ingested data

Author: Albert Chen - Vector Engineering Team (chena@broadinstitute.org)
"""

import datetime
import os

from scripts.extract_dna_mutations import extract_dna_mutations

data_folder = os.path.join("..", config["data_folder"])
static_data_folder = os.path.join("..", config["static_data_folder"])

# Get today's date in ISO format (YYYY-MM-DD)
today_str = datetime.date.today().isoformat()

# Find chunks
CHUNKS, = glob_wildcards(os.path.join(
    data_folder, "fasta_raw", "{chunk}.fa.gz"
))

def get_reference_file(wildcards, output):
    segment = wildcards.chunk.split('_')[0]
    serotype = wildcards.chunk.split('_')[1]

    return os.path.join(static_data_folder, 'mut_references', serotype, segment + '.fa')

rule all:
    input:
        combined_dna_mutations = os.path.join(data_folder, 'dna_mutations.csv')

rule preprocess_sequences:
    """Filter out sequences...
    """
    input:
        fasta = os.path.join(data_folder, "fasta_raw", "{chunk}.fa.gz")
    output:
        fasta = os.path.join(data_folder, "fasta_processed", "{chunk}.fa.gz")
    shell:
        """
        # Pass-through for now
        cp {input.fasta} {output.fasta}
        """

rule align_sequences:
    input:
        fasta = rules.preprocess_sequences.output.fasta
    params:
        ref_seq = get_reference_file
    output:
        bam = os.path.join(data_folder, "bam", "{chunk}.bam")
    shell:
        """
        minimap2 -a --eqx --MD -Q --score-N 0 --sam-hit-only {params.ref_seq} {input.fasta} | samtools view -b > {output.bam}
        """

rule extract_dna_mutations:
    """Find mutations on the NT level for each sequence
    """
    input:
        bam = rules.align_sequences.output.bam
    params:
        ref_seq = get_reference_file
    output:
        dna_mutation = os.path.join(data_folder, "dna_mutation", "{chunk}_dna_mutation.csv")
    run:
        dna_mutation_df = extract_dna_mutations(input.bam, params.ref_seq)
        dna_mutation_df.to_csv(output.dna_mutation, index=False)


rule combine_all_data:
    """Main rule for generating the data files for the browser
    Mostly just a bunch of joins
    """
    input:
        # processed_fasta_files = os.path.join(data_folder, "fasta_processed"),
        metadata = os.path.join(data_folder, "metadata.csv"),
        dna_mutation_files = expand(
            os.path.join(data_folder, "dna_mutation", "{chunk}_dna_mutation.csv"),
            chunk=CHUNKS
        )
        # gene_aa_mutation_files = expand(
        #     os.path.join(data_folder, "gene_aa_mutation", "{chunk}_gene_aa_mutation.csv"),
        #     chunk=CHUNKS
        # ),
        # protein_aa_mutation_files = expand(
        #     os.path.join(data_folder, "protein_aa_mutation", "{chunk}_protein_aa_mutation.csv"),
        #     chunk=CHUNKS
        # )
    output:
        # metadata_map = os.path.join(data_folder, "metadata_map.json"),
        # # Only used to build the location tree
        # case_data = os.path.join(data_folder, "case_data.json"),
        # case_data_csv = os.path.join(data_folder, "case_data.csv")
        combined_dna_mutations = os.path.join(data_folder, 'dna_mutations.csv')
    shell:
        """
        echo "hello" > {output.combined_dna_mutations}
        """
