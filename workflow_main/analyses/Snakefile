# coding: utf-8

"""Additional analyses

Author: Albert Chen - Vector Engineering Team (chena@broadinstitute.org)
"""

import datetime
import os

from analyses.scripts.az_report_generation import generate_az_reports
from analyses.scripts.global_sequencing_efforts import global_sequencing_efforts
from analyses.scripts.standalone_map_spec import standalone_map_spec

data_folder = config['data_folder']
static_data_folder = config['static_data_folder']

# Get today's date in ISO format (YYYY-MM-DD)
today_str = datetime.date.today().isoformat()

az_report_out = os.path.join(data_folder, 'az_reports')

rule az_reports:
    input:
        case_data = os.path.join(data_folder, "case_data.json"),
        metadata_map = os.path.join(data_folder, "metadata_map.json"),
        location_map = os.path.join(data_folder, "location_map.json"),
    output:
        report_out = directory(az_report_out),
        spike_snv_global = os.path.join(az_report_out, 'spike_snv_global.csv'),
        spike_snv_region = os.path.join(az_report_out, 'spike_snv_region.csv'),
        spike_cooc_global = os.path.join(az_report_out, 'spike_cooc_global.csv'),
        spike_cooc_region = os.path.join(az_report_out, 'spike_cooc_region.csv'),
        lineage_global = os.path.join(az_report_out, 'lineage_global.csv'),
        lineage_region = os.path.join(az_report_out, 'lineage_region.csv'),
    run:
        generate_az_reports(
            input.case_data, input.metadata_map, input.location_map,
            output.report_out
        )


rule surveillance_data:
    input:
        case_data = os.path.join(data_folder, "case_data.json"),
        metadata_map = os.path.join(data_folder, "metadata_map.json"),
        location_map = os.path.join(data_folder, "location_map.json"),
    params:
        out_folder = os.path.join(data_folder, 'surveillance'),
        start_date = (
            ('--start-date ' + config['surv_start_date'])
            if 'surv_start_date' in config else ''
        ),
        start_date_days_ago = config['surv_start_date_days_ago'],
        end_date_days_ago = config['surv_end_date_days_ago'],
        min_combo_count = config['surv_min_combo_count'],
        min_single_count = config['surv_min_single_count']
    output:
        group_counts = os.path.join(data_folder, 'surveillance', 'group_counts2.csv'),
        group_regression = os.path.join(data_folder, 'surveillance', 'group_regression2.csv'),
    shell:
        """
        python3 analyses/scripts/surveillance.py --case-data {input.case_data} --location-map {input.location_map} --metadata-map {input.metadata_map} --start-date-days-ago {params.start_date_days_ago} --end-date-days-ago {params.end_date_days_ago} --min-combo-count {params.min_combo_count} --min-single-count {params.min_single_count} -o {params.out_folder}
        """



rule global_sequencing_efforts:
    """Merge sequence data with case counts and ISO geographical data,
    to produce the "Global Sequencing Effort" plot in the web app
    """
    input:
        case_data = os.path.join(data_folder, "case_data.json"),
        location_map = os.path.join(data_folder, "location_map.json"),
    output:
        country_score = os.path.join(data_folder, "country_score.json")
    run:
        global_sequencing_efforts(
            input.case_data, input.location_map,
            output.country_score
        )

rule create_standalone_map_spec:
    input:
        spec = os.path.join("../src", "vega_specs", "map_combined.vg.json"),
        data = rules.global_sequencing_efforts.output.country_score
    output:
        standalone_spec = os.path.join(data_folder, "map_combined_standalone.vg.json")
    run:
        standalone_map_spec(input.spec, input.data, output.standalone_spec)



rule global_seq_data:
    input:
        case_data = os.path.join(data_folder, "case_data.json"),
        location_map = os.path.join(data_folder, "location_map.json"),
    params:
        out_folder = os.path.join(data_folder, 'new_global_data')
    output:
        case_count = os.path.join(data_folder, "new_global_data", "case_count.json"),
        sequences_per_month = os.path.join(data_folder, "new_global_data", "sequences_per_month.json"),
        turnaround_per_month = os.path.join(data_folder, "new_global_data", "turnaround_per_month.json"),
        iso_lookup = os.path.join(data_folder, "new_global_data", "iso_lookup.json")
    shell:
        """
        python3 analyses/scripts/global_seq_data.py --case-data {input.case_data} --location-map {input.location_map} -o {params.out_folder}
        """


rule additional_analyses:
    input:
        # AZ REPORTS
        rules.az_reports.output.spike_snv_global,
        rules.az_reports.output.spike_snv_region,
        rules.az_reports.output.spike_cooc_global,
        rules.az_reports.output.spike_cooc_region,
        rules.az_reports.output.lineage_global,
        rules.az_reports.output.lineage_region,
        # Surveillance data
        rules.surveillance_data.output.group_counts,
        rules.surveillance_data.output.group_regression,
        # Old global sequencing plot
        rules.create_standalone_map_spec.output.standalone_spec,
        # New global sequencing data
        rules.global_seq_data.output.case_count,
        rules.global_seq_data.output.sequences_per_month,
        rules.global_seq_data.output.turnaround_per_month,
        rules.global_seq_data.output.iso_lookup,

    output:
        done = touch(os.path.join(
            data_folder, "status", "additional_analyses_" + today_str + ".done"
        )),

