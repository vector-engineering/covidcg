# coding: utf-8

import os

from pathlib import Path

# Import scripts
from scripts.clean_metadata import clean_metadata
from scripts.combine_lineages import combine_lineages

configfile: "../config/config_custom.yaml"

CHUNKS, = glob_wildcards(os.path.join(
    config["data_folder"], "fasta_raw", "{chunk}.fa.gz"
))


rule all:
    input:
        # Cleaned metadata, with lineage assignments
        os.path.join(config["data_folder"], "metadata.csv")


rule pangolin_lineages:
    """Assign a lineage to each sequence using pangolin
    """
    input:
        fasta = os.path.join(config["data_folder"], "fasta_raw", "{chunk}.fa.gz")
    output:
        fasta = temp(os.path.join(config["data_folder"], "lineages", "{chunk}.fa")),
        lineages = os.path.join(config["data_folder"], "lineages", "{chunk}.csv")
    conda: "envs/pangolin.yaml"
    shell:
        """
        # Pangolin can only use un-gzipped fasta files
        gunzip -c {input.fasta} > {output.fasta}
        pangolin --outfile {output.lineages} {output.fasta}
        """


rule combine_lineages:
    """Combine all lineage result chunks
    """
    input:
        lineages = expand(os.path.join(config["data_folder"], "lineages", "{chunk}.csv"), chunk=CHUNKS)
    output:
        lineages = os.path.join(config["data_folder"], "lineages.csv")
    run:
        combine_lineages(input.lineages, output.lineages)

        
rule clean_metadata:
    """Clean metadata, incorporate lineage assignments into metadata
    """
    input:
        metadata_dirty = os.path.join(config["data_folder"], "metadata_raw.csv"),
        lineages = rules.combine_lineages.output.lineages
    output:
        metadata_clean = os.path.join(config["data_folder"], "metadata.csv")
    run:
        clean_metadata(input.metadata_dirty, input.lineages, output.metadata_clean)
