import { reds } from '../constants/colors';
import { getAllProteins } from './gene_protein';

const numColors = reds.length;
const proteins = getAllProteins();

export function mutationHeatmapToPymolScript({
  activeProtein,
  activeGroup,
  pdbId,
  mutations,
  selectIndividualMutations,
  selectAllMutations,
  includeDomains,
  baseColor,
  useAssembly,
  assemblyName,
}) {
  let individualMutationSelections = '';
  if (selectIndividualMutations) {
    mutations.forEach((mut) => {
      individualMutationSelections += `cmd.select('${mut.ref}${mut.pos.toString()}${
        mut.alt
      }', 'resi ${mut.pos.toString()}')\n`;
    });
  }

  let allMutationsSelection = '';
  if (selectAllMutations) {
    allMutationsSelection = `cmd.select('all_mutations', 'resi ${mutations
      .map((mut) => mut.pos.toString())
      .join(' or resi ')}')\n`;
  }

  let domainSelection = '';
  if (includeDomains) {
    const domains = proteins.find(
      (protein) => protein.name === activeProtein
    ).domains;
    domains.forEach((domain) => {
      const domainSelectionName = domain.name.toLowerCase().replace(' ', '_');
      const domainResiSelection = domain.ranges
        .map((range) => `${range[0]}-${range[1]}`)
        .join(' or resi ');
      domainSelection += `cmd.select('${domainSelectionName}', 'resi ${domainResiSelection}')\n`;
    });
  }

  let script = `#!/usr/bin/env python3
# coding: utf-8

## AUTO-GENERATED BY COVIDCG.ORG
## PROTEIN: ${activeProtein}
## GROUP: ${activeGroup}

from pymol import cmd, stored

pdb_name = '${pdbId}'

cmd.delete('all')

${useAssembly ? `cmd.set('assembly', ${assemblyName})` : ''}

cmd.fetch(pdb_name, name=pdb_name)

# Get rid of water/hydrogens in the structure
cmd.remove('solvent')
cmd.remove('hydrogens')
# Clean up the rest... remove all non-protein atoms (PyMOL 2.1+ only)
cmd.remove('(not polymer.protein)')

# Hide cartoon and show surface
cmd.hide('cartoon')
cmd.show('surface')

# Default color
cmd.color('0x${baseColor.substr(1)}')

# Create selections
${individualMutationSelections}
${allMutationsSelection}
${domainSelection}

# RESI COLORING CODE
`;

  mutations.forEach((mut) => {
    const colorInd = Math.floor((mut.fraction - 0.001) * numColors);
    // PyMOL needs colors in "0xRRGGBB" instead of "#RRGGBB"
    script += `cmd.color('0x${reds[colorInd].substr(1)}', 'resi ${mut.pos}')\n`;
  });

  return script;
}
