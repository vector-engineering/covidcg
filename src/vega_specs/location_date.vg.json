{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "A basic line chart example.",
  "width": 700,
  "height": 300,
  "padding": 5,

  "signals": [
    { "name": "percentages", "value": true },
    { "name": "cumulative", "value": true },
    { "name": "skipFiltering", "value": false },
    { "name": "interpolate", "value": "step" },
    {
      "name": "dateRangeStart",
      "value": 1575158400000,
      "comment": "Along with dateRangeEnd, these are hard limits on the dates shown. May need to update when we hit 2021. Dates are in milliseconds, unix epoch"
    },
    {
      "name": "dateRangeEnd",
      "value": 4070908800000
    },
    {
      "name": "dateBin",
      "value": 604800000,
      "comment": "Binning of observations by date, where date is in milliseconds. Default is 1 day (1000 * 60 * 60 * 24 = 86400000). This should never be less than a day. This is passed to the bin transform of cases_by_date_and_group. (1 week = 604800000)"
    },
    { "name": "cumulativeWindow", "update": "cumulative ? [null, 0] : [0, 0]"},
    { "name": "locationDateCountField", "update": "cumulative ? 'cumulative_location_date_count_agg' : 'location_date_count_agg'" },
    { "name": "yField", "update": "percentages ? 'counts_norm' : 'counts_agg'" },
    { "name": "yLabel", "value": "% Sequences" },
    { "name": "yFormat", "update": "percentages ? '%' : 's'" },
    { "name": "tooltipCountFormat", "update": "percentages ? '.1%' : 'd'" },
    {
      "name": "hoverLocation",
      "value": null,
      "on": [
        {
          "events": {
            "merge": [
              {"markname": "locationlines", "type": "mouseover", "consume": true },
              {"markname": "locationdots", "type": "mouseover", "consume": true },
              {"markname": "locationlabel", "type": "mouseover", "consume": true }
            ]
          },
          "update": "{location: datum.location}",
          "force": true
        },
        {
          "events": {
            "merge": [
              {"markname": "locationlines", "type": "mouseout", "consume": true },
              {"markname": "locationdots", "type": "mouseout", "consume": true },
              {"markname": "locationlabel", "type": "mouseout", "consume": true }
            ]
          },
          "update": "null",
          "force": true
        }
      ]
    },
    {
      "name": "clear",
      "value": true,
      "comment": "If clicking on anything but a grouped bar, then clear the selection (by clearing the 'selection' data object)",
      "on": [
        {
          "events": "mouseup[!event.item]",
          "update": "true",
          "force": true
        }
      ]
    },
    {
      "name": "shift",
      "value": false,
      "comment": "Track whether or not the shift key is pressed. Used to select multiple groups by holding down shift before clicking",
      "on": [
        {
          "events": {
            "merge": [
              { "markname": "locationlines", "type": "click" },
              { "markname": "locationdots", "type": "click" },
              { "markname": "locationlabel", "type": "click" }
            ]
          },
          "update": "event.shiftKey",
          "force": true
        },
        {
          "events": "@legendLabel:click, @legendSymbol:click",
          "update": "{location: datum.value}",
          "force": true
        }
      ]
    },
    {
      "name": "clicked",
      "value": null,
      "comment": "Track clicks on the group bars, for selection purposes",
      "on": [
        {
          "events": {
            "merge": [
              { "markname": "locationlines", "type": "click" },
              { "markname": "locationdots", "type": "click" },
              { "markname": "locationlabel", "type": "click" }
            ]
          },
          "update": "{location: datum.location}",
          "force": true
        },
        {
          "events": "@legendLabel:click, @legendSymbol:click",
          "update": "{location: datum.value}",
          "force": true
        }
      ]
    }
  ],

  "data": [
    {
      "name": "selectedGroups"
    },
    {
      "name": "location_data",
      "format": {
        "parse": {
          "location": "string",
          "counts": "number",
          "location_counts": "number",
          "location_date_count": "number",
          "collection_date": "date:'%Q'"
        }
      },
      "transform": [
        {
          "type": "filter",
          "expr": "skipFiltering || indata('selectedGroups', 'group', datum.group) || length(data('selectedGroups')) == 0"
        },
        {
          "type": "aggregate",
          "groupby": ["location", "collection_date"],
          "fields": ["counts", "location_date_count", "cumulative_location_date_count", "location_counts"],
          "ops": ["sum", "max", "max", "max"],
          "as": ["counts", "location_date_count", "cumulative_location_date_count", "location_counts"]
        },
        {
          "comment": "Bin observations by date. The width of each bin is determined by the signal dateBin. Since the most detail in the date from GISAID is by day, the bin shouldn't ever be smaller than a day.",
          "type": "bin",
          "field": "collection_date",
          "extent": [
            { "signal": "dateRangeStart" },
            { "signal": "dateRangeEnd" }
          ],
          "step": { "signal": "dateBin" },
          "as": ["day_start", "day_end"]
        },
        {
          "type": "window",
          "sort": { "field": "day_start" },
          "groupby": ["location"],
          "ops": ["sum", "sum", "max"],
          "fields": ["counts", "location_date_count", "cumulative_location_date_count"],
          "as": ["counts_agg", "location_date_count_agg", "cumulative_location_date_count_agg"],
          "frame": { "signal": "cumulativeWindow" }
        },
        {
          "type": "collect",
          "sort": {
            "field": ["location", "day_start"],
            "order": ["ascending", "ascending"]
          }
        },
        {
          "type": "formula",
          "expr": "datum.counts_agg / datum[locationDateCountField]",
          "as": "counts_norm"
        },
        {
          "comment": "Recalculate the day_end from the day_start and dateBin, since the imputation can't work on more than one field at once.",
          "type": "formula",
          "expr": "datum.day_start + dateBin",
          "as": "day_end"
        },
        {
          "type": "formula",
          "expr": "datum.day_start + (dateBin / 2)",
          "as": "day_middle"
        }
      ]
    },
    {
      "name": "selected",
      "comment": "A list of groups that are selected",
      "on": [
        { "trigger": "clear", "remove": true },
        { "trigger": "!shift", "remove": true },
        { "trigger": "!shift && clicked", "insert": "clicked" },
        { "trigger": "shift && clicked", "toggle": "clicked" }
      ]
    }
  ],

  "scales": [
    {
      "name": "xscale",
      "type": "time",
      "range": "width",
      "domain": {
        "fields": [
          {"data": "location_data", "field": "day_start"},
          {"data": "location_data", "field": "day_end"}
        ]
      }
    },
    {
      "name": "yscale",
      "type": "linear",
      "range": "height",
      "nice": true,
      "zero": true,
      "domain": {"data": "location_data", "field": {"signal": "yField"}}
    },
    {
      "name": "color",
      "type": "ordinal",
      "range": {"scheme": "category10"},
      "domain": {"data": "location_data", "field": "location"}
    }
  ],

  "axes": [
    {
      "orient": "bottom",
      "scale": "xscale",
      "format": "%m-%d",
      "zindex": 0,

      "grid": true,
      "gridScale": "yscale",
      "gridColor": "#DDD",

      "labelAngle": 310,
      "labelAlign": "right",
      "labelBaseline": "middle",
      "labelPadding": 5,

      "title": "Collection Date",
      "titleFontSize": 14,
      "titlePadding": 8,
      "tickCount": 15
    },
    {
      "orient": "left",
      "scale": "yscale",
      "format": { "signal": "yFormat" },

      "grid": true,
      "gridScale": "xscale",
      "gridColor": "#DDD",

      "labelFontSize": 14,
      "labelPadding": 4,

      "title": {"signal": "yLabel"},
      "titleFontSize": 14,
      "titlePadding": 10
    }
  ],

  "legends": [
    {
      "stroke": "color",
      "title": "Locations",
      "orient": "top",
      "direction": "vertical",
      "columns": 8,
      "encode": {
        "symbols": {
          "name": "legendSymbol",
          "interactive": true,
          "update": {
            "fill": {"value": "transparent"},
            "strokeWidth": {"value": 2},
            "opacity": [
              {
                "test": "!length(data('selected')) || indata('selected', 'location', datum.value)",
                "value": 0.8
              },
              {"value": 0.15}
            ],
            "size": {"value": 64}
          }
        },
        "labels": {
          "name": "legendLabel",
          "interactive": true,
          "update": {
            "opacity": [
              {
                "test": "!length(data('selected')) || indata('selected', 'location', datum.value)",
                "value": 1
              },
              {"value": 0.25}
            ]
          }
        }
      }
    }
  ],

  "marks": [
    {
      "name": "layer0",
      "type": "group",
      "from": {
        "facet": {
          "name": "series",
          "data": "location_data",
          "groupby": "location"
        }
      },
      "data": [
        {
          "name": "label",
          "source": "series",
          "transform": [
            {
              "type": "joinaggregate",
              "fields": ["day_middle"],
              "ops": ["max"],
              "as": ["max_day"]
            },
            {
              "type": "filter",
              "expr": "datum.day_middle == datum.max_day"
            }
          ]
        }
      ],
      "marks": [
        {
          "name": "locationlines",
          "type": "line",
          "from": {"data": "series"},
          "encode": {
            "enter": {
              "strokeWidth": {"value": 3},
              "strokeMiterLimit": {"value": 2},
              "strokeCap": {"value": "round"}
            },
            "update": {
              "interpolate": {"signal": "interpolate"},
              "x": {"scale": "xscale", "field": "day_middle"},
              "y": {"scale": "yscale", "field": {"signal": "yField"}},
              "stroke": [
                {
                  "test": "(!length(data('selected')) || indata('selected', 'location', datum.location)) && (datum.counts_agg > 0)",
                  "scale": "color",
                  "field": "location"
                },
                {"value": "#CCC"}
              ],
              "strokeOpacity": [
                {
                  "test": "hoverLocation && hoverLocation.location == datum.location",
                  "value": 0.6
                },
                {"value": 1.0}
              ],
              "zindex": [
                {
                  "test": "hoverLocation && hoverLocation.location == datum.location",
                  "value": 3
                },
                { "value": 1 }
              ]
            }
          }
        },
        {
          "name": "locationdots",
          "type": "symbol",
          "from": {"data": "series"},
          "encode": {
            "enter": {
              "size": {"value": 30},
              "fill": {"value": "#fff"},
              "strokeWidth": {"value": 1.5}
            },
            "update": {
              "x": {"scale": "xscale", "field": "day_middle"},
              "y": {"scale": "yscale", "field": {"signal": "yField"}},
              "stroke": [
                {
                  "test": "(!length(data('selected')) || indata('selected', 'location', datum.location)) && (datum.counts_agg > 0)",
                  "scale": "color",
                  "field": "location"
                },
                {"value": "#CCC"}
              ],
              "strokeOpacity": [
                {
                  "test": "hoverLocation && hoverLocation.location == datum.location",
                  "value": 0.6
                },
                {"value": 1.0}
              ],
              "zindex": [
                {
                  "test": "hoverLocation && hoverLocation.location == datum.location",
                  "value": 3
                },
                { "value": 1 }
              ],
              "tooltip": {
                "signal": "{title: datum.location, 'Sequences': format(datum[yField], tooltipCountFormat), 'Total Location Counts': datum.location_counts, 'Collection date': timeFormat(datum.day_start, '%b %d %Y')}"
              }
            }
          }
        },
        {
          "name": "locationlabel",
          "type": "text",
          "from": {"data": "label"},
          "encode": {
            "enter": {
              "dy": {"value": -5},
              "fontSize": {"value": 14},
              "angle": {"value": 340},
              "zindex": {"value": 5}
            },
            "update": {
              "x": {"scale": "xscale", "field": "day_middle", "offset": 2},
              "y": {"scale": "yscale", "field": {"signal": "yField"}},
              "text": {"field": "location"},
              "fill": [
                {
                  "test": "(!length(data('selected')) || indata('selected', 'location', datum.location)) && (datum.counts_agg > 0)",
                  "scale": "color",
                  "field": "location"
                },
                { "value": "#ccc" }
              ],
              "fillOpacity": [
                {
                  "test": "hoverLocation && hoverLocation.location == datum.location",
                  "value": 0.6
                },
                {"value": 1}
              ]
            }
          }
        }
      ]
    }
  ]
}
