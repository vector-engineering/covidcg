{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "A basic stacked bar chart example.",
  "comment": "These will be overridden by the container of this vega plot",
  "width": 700,
  "height": 380,
  "padding": 5,

  "signals": [
    { "name": "disableSelectionColoring", "value": true },
    { "name": "detailHeight", "value": 280 },
    { "name": "detailClip", "update": "detailHeight == 0" },
    {
      "name": "overviewY",
      "update": "detailHeight == 0 ? 0 : detailHeight + 40"
    },
    { "name": "overviewHeight", "value": 60 },
    {
      "name": "dateRangeStart",
      "value": 1575158400000,
      "comment": "Along with dateRangeEnd, these are hard limits on the dates shown. May need to update when we hit 2021. Dates are in milliseconds, unix epoch"
    },
    {
      "name": "dateRangeEnd",
      "value": 1609372800000
    },
    {
      "name": "dateBin",
      "value": 86400000,
      "comment": "Binning of observations by date, where date is in milliseconds. Default is 1 day (1000 * 60 * 60 * 24). This should never be less than a day. This is passed to the bin transform of cases_by_date_and_group"
    },
    {
      "name": "overviewYLabel",
      "value": "All Seqs",
      "comment": "Y-axis label of the overview (bottom) panel"
    },
    {
      "name": "detailYLabel",
      "value": "Sequences by Lineage",
      "comment": "Y-axis label of the detail (upper) panel"
    },
    {
      "name": "yFormat",
      "value": "s"
    },
    {
      "name": "stackOffset",
      "value": "zero",
      "comment": "Whether to show the counts as percentages ('normalize') or as absolute counts ('zero'). This is passed to the stack transform of cases_by_date_and_group"
    },
    {
      "name": "cumulativeWindow",
      "value": [0, 0],
      "comment": "Window to calculate cumulative counts over. [0, 0] disables this behavior, while [null, 0] does the cumulative counting"
    },
    {
      "name": "detailDomain",
      "comment": "The date range selected on the overview (bottom) panel. The units are in JS date objects. If there is no date selected, this should be null."
    },
    {
      "name": "brush",
      "value": 0,
      "comment": "The date range selected on the overview (bottom) panel, in screen-space coordinate units (pixels). This will be converted to dates for the detailDomain signal by referencing the xOverview scale"
    },
    {
      "name": "delta",
      "value": 0,
      "comment": "The difference between windows when dragging a date selection window in the overview (bottom) panel. It is tracked onmousemove and used to update the 'brush' signal after mouseup. Units are in screen-space coordinates (pixels)"
    },
    {
      "name": "xdown",
      "value": 0,
      "comment": "The initial screen-space click location, in screen-space coordinates (pixels), when first clicking on the date range window before dragging it. This is used to calculate the 'delta' signal"
    },
    {
      "name": "anchor",
      "value": null,
      "comment": "The initial 'brush' signal state, when clicking on the date range window to drag it. Units are in screen-space coordinates (pixels). Used to update the 'brush' signal after dragging it."
    },
    {
      "name": "hoverBar",
      "value": null,
      "comment": "Used to store which group is hovered over. Is an object with field 'group'"
    },
    {
      "name": "clear",
      "value": true,
      "comment": "If clicking on anything but a grouped bar, then clear the selection (by clearing the 'selection' data object)",
      "on": [
        {
          "events": "mouseup[!event.item]",
          "update": "true",
          "force": true
        }
      ]
    },
    {
      "name": "shift",
      "value": false,
      "comment": "Track whether or not the shift key is pressed. Used to select multiple groups by holding down shift before clicking",
      "on": [
        {
          "events": "@detailbars:click",
          "update": "event.shiftKey",
          "force": true
        }
      ]
    },
    {
      "name": "clicked",
      "value": null,
      "comment": "Track clicks on the group bars, for selection purposes",
      "on": [
        {
          "events": "@detailbars:click",
          "update": "{group: datum.group}",
          "force": true
        }
      ]
    }
  ],

  "data": [
    {
      "name": "selected",
      "comment": "A list of groups that are selected",
      "values": [{ "group": "S|614|D|G" }],
      "on": [
        { "trigger": "clear", "remove": true },
        { "trigger": "!shift", "remove": true },
        { "trigger": "!shift && clicked", "insert": "clicked" },
        { "trigger": "shift && clicked", "toggle": "clicked" }
      ]
    },
    {
      "name": "cases_by_date_and_group",
      "comment": "Main data object, same as caseData in store",
      "format": {
        "parse": {
          "group": "string",
          "cases_sum": "number",
          "date": "date:'%Q'"
        }
      },
      "transform": [
        {
          "comment": "this creates the group_sum field on each item, which is a total sum of all cases for that group across all dates",
          "type": "joinaggregate",
          "ops": ["sum"],
          "fields": ["cases_sum"],
          "as": ["group_counts"],
          "groupby": ["group", "groupName"]
        },
        {
          "comment": "Bin observations by date. The width of each bin is determined by the signal dateBin. Since the most detail in the date from GISAID is by day, the bin shouldn't ever be smaller than a day.",
          "type": "bin",
          "field": "date",
          "extent": [
            { "signal": "dateRangeStart" },
            { "signal": "dateRangeEnd" }
          ],
          "step": { "signal": "dateBin" },
          "as": ["day_start", "day_end"]
        },
        {
          "comment": "After binning, combine observations in the same group and day, by taking the sum of the sequence counts. The max aggs on group_counts and color are just to carry the fields over.",
          "type": "aggregate",
          "groupby": [
            "group",
            "groupName",
            "new_group",
            "day_start",
            "day_end"
          ],
          "fields": ["cases_sum", "group_counts", "color"],
          "ops": ["sum", "max", "max"],
          "as": ["cases_sum", "group_counts", "color"]
        },
        {
          "comment": "If a group isn't present in a dateBin that others are, then impute an empty value. This is only important for the cumulative view, so as to keep things consistent. Unfortunately I don't know how to impute for days with no data at all yet. This leads to some gaps in the cumulative view.",
          "type": "impute",
          "field": "cases_sum",
          "key": "day_start",
          "groupby": ["group", "groupName", "color", "group_counts"],
          "value": 0
        },
        {
          "comment": "Recalculate the day_end from the day_start and dateBin, since the imputation can't work on more than one field at once.",
          "type": "formula",
          "expr": "datum.day_start + dateBin",
          "as": "day_end"
        },
        {
          "comment": "Calculate the cumulative counts. If we're not running in cumulative mode, then output the cumulative count in a dummy field (determined by the signal windowField). If we are in cumulative mode, then overwrite the cases_sum field.",
          "type": "window",
          "sort": { "field": "day_start" },
          "groupby": ["group", "groupName"],
          "ops": ["sum"],
          "fields": ["cases_sum"],
          "as": ["cases_sum_new"],
          "frame": { "signal": "cumulativeWindow" }
        },
        {
          "comment": "Stack bars on the same date in preparation for the visualization. Offset (zero vs. normalize) controls counts vs. percentages.",
          "type": "stack",
          "groupby": ["day_start"],
          "sort": { "field": "group" },
          "field": "cases_sum_new",
          "offset": { "signal": "stackOffset" }
        }
      ]
    },
    {
      "name": "cases_by_date",
      "source": "cases_by_date_and_group",
      "comment": "Collapse cases by date (ignore group), for the data in the overview (bottom) plot",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["day_start", "day_end"],
          "fields": ["cases_sum"],
          "ops": ["sum"],
          "as": ["cases_sum_by_date"]
        }
      ]
    }
  ],

  "marks": [
    {
      "type": "group",
      "name": "detail",
      "comment": "The mark group for the detail (upper) panel",
      "encode": {
        "comment": "The width and height should be overridden by the plot's container",
        "update": {
          "clip": { "signal": "detailClip" },
          "height": { "signal": "detailHeight" },
          "width": { "signal": "width" }
        }
      },
      "signals": [
        {
          "name": "hoverBar",
          "comment": "Set the hoverBar signal when a bar is hovered over, and clear it when the mouse is hovered over anything else",
          "push": "outer",
          "on": [
            {
              "events": "@detailbars:mouseover!",
              "update": "{group: datum.group, date: datum.day_start}"
            },
            {
              "events": "@detailbars:mouseout!",
              "update": "null"
            }
          ]
        }
      ],
      "scales": [
        {
          "name": "x",
          "comment": "Provide two fields for the domain, since if we only provide the day_start, the last day will get cut off, and if we only provide day_end, the first day will get cut off",
          "type": "time",
          "range": "width",
          "domain": {
            "fields": [
              { "data": "cases_by_date", "field": "day_start" },
              { "data": "cases_by_date", "field": "day_end" }
            ]
          },
          "domainRaw": { "signal": "detailDomain" }
        },
        {
          "name": "y",
          "comment": "Scale the y axis from 0 to the highest bar height",
          "type": "linear",
          "range": [{ "signal": "detailHeight" }, 0],
          "nice": true,
          "zero": true,
          "domain": { "data": "cases_by_date_and_group", "field": "y1" }
        }
      ],
      "marks": [
        {
          "type": "group",
          "comment": "Not sure why we need a group mark here, but this is how it is in the example plot, so I didn't change it",
          "encode": {
            "update": {
              "height": { "field": { "group": "height" } },
              "width": { "field": { "group": "width" } }
            }
          },
          "axes": [
            {
              "orient": "bottom",
              "scale": "x",
              "zindex": 0,
              "format": "%m-%d",
              "tickCount": "week",
              "grid": true,
              "gridScale": "y",
              "gridColor": "#DDD",

              "labelAngle": 310,
              "labelAlign": "right",
              "labelBaseline": "middle",
              "labelPadding": 5,

              "labelFontSize": 12
            },
            {
              "orient": "left",
              "scale": "y",
              "format": { "signal": "yFormat" },
              "zindex": 0,
              "grid": true,
              "gridColor": "#DDD",

              "title": { "signal": "detailYLabel" },
              "titleFontSize": 14,
              "titlePadding": 10,

              "labelFontSize": 14,
              "labelPadding": 5,
              "tickCount": 5
            }
          ],

          "marks": [
            {
              "type": "rect",
              "name": "detailbars",
              "from": { "data": "cases_by_date_and_group" },
              "clip": true,
              "encode": {
                "comment": "Define the tooltip and other constant values here",
                "enter": {
                  "strokeWidth": { "value": 1 },
                  "tooltip": {
                    "signal": "{title: datum.groupName, 'Total sequences': datum.group_counts, 'Sequences': datum.cases_sum_new, 'Collection date': timeFormat(datum.day_start, '%b %d %Y')}"
                  }
                },
                "update": {
                  "x": { "scale": "x", "field": "day_start" },
                  "x2": { "scale": "x", "field": "day_end" },
                  "y": { "scale": "y", "field": "y0" },
                  "y2": { "scale": "y", "field": "y1" },
                  "fill": [
                    {
                      "test": "disableSelectionColoring || (!length(data('selected')) || indata('selected', 'group', datum.group)) && (datum.cases_sum_new > 0)",
                      "field": "color",
                      "comment": "If this group is selected, or if nothing is selected, then color it normally."
                    },
                    {
                      "value": "#CCC",
                      "comment": "If there is a selected group and this group isn't one of them, then color it light grey"
                    }
                  ],
                  "stroke": [
                    {
                      "test": "hoverBar && hoverBar.group == datum.group && datum.cases_sum_new > 0",
                      "value": "#000",
                      "comment": "If this group is being hovered over, then set outline it black. Since we're imputing empty groups, only highlight groups with more than zero cases."
                    },
                    { "value": "transparent" }
                  ],
                  "zindex": [
                    {
                      "test": "hoverBar && hoverBar.group == datum.group && datum.cases_sum > 0",
                      "value": 3,
                      "comment": "Same as the 'stroke' test, but we also need to set the z-index here since it's possible the outline stroke will get hidden under other bars"
                    },
                    { "value": 1 }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "group",
      "name": "overview",
      "comment": "Mark group for the overview (bottom) panel",
      "encode": {
        "comment": "The width should be overridden by the plot container",
        "update": {
          "x": { "value": 0 },
          "y": { "signal": "overviewY" },
          "width": { "signal": "width" },
          "height": { "signal": "overviewHeight" },
          "fill": { "value": "transparent" }
        }
      },
      "signals": [
        {
          "name": "brush",
          "comment": "Trigger the date selection brush when any area of the overview plot is clicked. The update code was originally [x(), x()], but I changed it to snap to days instead of selecting by screen-space pixel. All the code does is convert from screen-space pixels --> date --> days --> round to nearest day --> date --> screen-space pixels. invert() is used to convert from pixels to date, and round(x / 86400000) rounds to the nearest day. round() * 86400000 converts from days back into the date (in milliseconds), and scale() converts from date back into screen-space coordinates. This fragment of code is used in all the signals below for day-snapping.",
          "push": "outer",
          "on": [
            {
              "events": {
                "merge": [
                  { "markname": "overview", "type": "mousedown" },
                  { "markname": "overviewbars", "type": "mousedown" }
                ]
              },
              "update": "[scale('xOverview', round(invert('xOverview', x()) / 86400000) * 86400000), scale('xOverview', round(invert('xOverview', x()) / 86400000) * 86400000)]"
            },
            {
              "comment": "Clear the brush selection on any double-click",
              "events": {
                "merge": [
                  { "markname": "overview", "type": "dblclick" },
                  { "markname": "brushrect", "type": "dblclick" }
                ]
              },
              "update": "0"
            },
            {
              "comment": "Update the brush on mousemove. Hold the first point of the range constant (brush[0]), and modify brush[1] by snapping to day as well (see comment above). clamp() is used to ensure that the range stays within the bounds of the plot. Capture mousemove events on both the plot and the bars to allow dragging anywhere on the overview plot",
              "events": {
                "merge": [
                  {
                    "source": "window",
                    "type": "mousemove",
                    "between": [
                      { "markname": "overview", "type": "mousedown" },
                      { "source": "window", "type": "mouseup" }
                    ],
                    "consume": true
                  },
                  {
                    "source": "window",
                    "type": "mousemove",
                    "between": [
                      { "markname": "overviewbars", "type": "mousedown" },
                      { "source": "window", "type": "mouseup" }
                    ],
                    "consume": true
                  }
                ]
              },
              "update": "[brush[0], clamp(scale('xOverview', round(invert('xOverview', x()) / 86400000) * 86400000), 0, width)]"
            },
            {
              "comment": "When the mousemove is finished (marked by mouseup event), then reorganize the brush vector so that the lesser value is first",
              "events": {
                "merge": [
                  { "markname": "overview", "type": "mouseup" },
                  { "markname": "brushrect", "type": "mouseup" }
                ]
              },
              "update": "abs(span(brush)) <= 2 ? 0 : [brush[0], brush[1]]"
            },
            {
              "comment": "Capture when the date range window is dragged, and update the ranges. Since the dragging logic implements day-snapping on its own, we don't have to round anything here.",
              "events": { "signal": "delta" },
              "update": "clampRange([anchor[0] + delta, anchor[1] + delta], 0, width)"
            }
          ]
        },
        {
          "name": "anchor",
          "comment": "Make a copy of the brush vector when the date range is clicked. Used by the 'brush' signal to update itself after a date range drag",
          "push": "outer",
          "on": [{ "events": "@brushrect:mousedown", "update": "slice(brush)" }]
        },
        {
          "name": "xdown",
          "comment": "Track the initial drag x-coordinate, and snap to the nearest day. Used to set the 'delta' signal",
          "push": "outer",
          "on": [
            {
              "events": "@brushrect:mousedown",
              "update": "scale('xOverview', round(invert('xOverview', x()) / 86400000) * 86400000)"
            }
          ]
        },
        {
          "name": "delta",
          "comment": "Track how far and in what direction the date range was dragged. Snap to the nearest day. Used to set the 'brush' signal after a date range drag",
          "push": "outer",
          "on": [
            {
              "events": "[@brushrect:mousedown, window:mouseup] > window:mousemove!",
              "update": "scale('xOverview', round(invert('xOverview', x()) / 86400000) * 86400000) - xdown"
            }
          ]
        },
        {
          "name": "detailDomain",
          "comment": "The same as the 'brush' signal, but in date coordinates instead of screen-space (pixel) coordinates",
          "push": "outer",
          "on": [
            {
              "events": { "signal": "brush" },
              "update": "span(brush) ? invert('xOverview', brush) : null"
            }
          ]
        }
      ],
      "scales": [
        {
          "name": "xOverview",
          "comment": "Provide two fields for the domain, since if we only provide the day_start, the last day will get cut off, and if we only provide day_end, the first day will get cut off",
          "type": "time",
          "range": "width",
          "domain": {
            "fields": [
              { "data": "cases_by_date", "field": "day_start" },
              { "data": "cases_by_date", "field": "day_end" }
            ]
          }
        },
        {
          "name": "yOverview",
          "type": "linear",
          "range": [{ "signal": "overviewHeight" }, 0],
          "domain": { "data": "cases_by_date", "field": "cases_sum_by_date" },
          "nice": true,
          "zero": true
        }
      ],
      "axes": [
        {
          "orient": "bottom",
          "scale": "xOverview",
          "title": "Collection date",
          "titleFontSize": 18,
          "titlePadding": 10,
          "format": "%m-%d",

          "grid": true,
          "gridColor": "#DDD",
          "gridScale": "yOverview",

          "labelAngle": 310,
          "labelAlign": "right",
          "labelBaseline": "middle",
          "labelPadding": 5,

          "labelFontSize": 12,

          "tickCount": "week"
        },
        {
          "orient": "left",
          "scale": "yOverview",

          "title": { "signal": "overviewYLabel" },
          "titleFontSize": 14,
          "titlePadding": 10,

          "labelFontSize": 14,
          "labelPadding": 3,

          "tickCount": 3
        }
      ],
      "marks": [
        {
          "type": "rect",
          "name": "overviewbars",
          "from": { "data": "cases_by_date" },
          "encode": {
            "update": {
              "x": { "scale": "xOverview", "field": "day_start" },
              "x2": { "scale": "xOverview", "field": "day_end" },
              "y": { "scale": "yOverview", "value": 0 },
              "y2": { "scale": "yOverview", "field": "cases_sum_by_date" },
              "fill": [
                {
                  "test": "detailDomain && inrange(datum.day_start, [detailDomain[0], detailDomain[1] - 1])",
                  "value": "#f00",
                  "comment": "Color this bar red if it's within the date selection range"
                },
                { "value": "#888" }
              ]
            }
          }
        },
        {
          "type": "rect",
          "name": "brushrect",
          "comment": "Draw the date selection range",
          "encode": {
            "enter": {
              "y": { "value": 0 },
              "height": { "signal": "overviewHeight" },
              "fill": { "value": "#333" },
              "fillOpacity": { "value": 0.2 }
            },
            "update": {
              "x": { "signal": "brush[0]" },
              "x2": { "signal": "brush[1]" }
            }
          }
        },
        {
          "type": "rect",
          "comment": "Draw the beginning bar of the date selection range",
          "interactive": false,
          "encode": {
            "enter": {
              "y": { "value": 0 },
              "height": { "signal": "overviewHeight" },
              "width": { "value": 1 },
              "fill": { "value": "firebrick" }
            },
            "update": {
              "x": { "signal": "brush[0]" }
            }
          }
        },
        {
          "type": "rect",
          "comment": "Draw the ending bar of the date selection range",
          "interactive": false,
          "encode": {
            "enter": {
              "y": { "value": 0 },
              "height": { "signal": "overviewHeight" },
              "width": { "value": 1 },
              "fill": { "value": "firebrick" }
            },
            "update": {
              "x": { "signal": "brush[1]" }
            }
          }
        }
      ]
    }
  ]
}
